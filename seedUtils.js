const faker = require('faker');
const chance = require('chance');
const randomName = require('node-random-name');
const createName = require('./nameUtils').createFullName

const sectorSkillsInterests = {
  sectors: [
    "environment", "education", "homelessness", "prison reform", "refugee assistance", "animal welfare", "civic engagement", "arts and culture"
  ],
  skills: [
    "technology", "translation", "repairs", "teaching", "tutoring", "mentorship", "legal", "medical", "coaching", "grants management", "nonprofit management", "civic leadership"
  ],
  serviceInterests: ["tutoring", "mentorship", "city cleanup", "fundraising", "event management", "sports coaching", "youth work", "food service", "arts & crafts"]
}

const genderSelect = function () {
  let randomIdx = Math.floor(Math.random()*2);
  if (randomIdx !== 1) {
    return "male"
  } else {
     return "female";
  }
}

function createUser () {
  let randomGender = genderSelect();
  var currentName = createFullName(randomGender);
  return {
    name: createFullName(randomGender),
    gender: randomGender,
    email: faker.internet.email(),
    password: faker.internet.password(),
    isAdmin: false,
    searchable: true
  };
}

function createPhoto (gender) {

  if (gender === "male") photoGender = "men";
  if (gender === "female") photoGender = "women";
  let photoNo = Math.floor(Math.random()*99);
  let imageUrl =  `https://randomuser.me/api/portraits/${photoGender}/${photoNo}.jpg`;
  return imageUrl;

}

var locations = ["Chicago", "New York", "Los Angeles", "San Francisco", "Portland"]

function createServiceInterests () {
  let servicesToReturn = []
  let services = sectorSkillsInterests['serviceInterests'];
  // console.log('voila les services', services)
  let dontMutateServices = services.slice();
  let counter = Math.floor(Math.random()*services.length) + 1;
  // console.log('i am a coutner who cares', counter)
  while (counter) {
    // console.log('hi from counter')
    let newServices = dontMutateServices.pop()
    // console.log('services to return . pop', newServices)
    let randomIdx = Math.floor(Math.random()* dontMutateServices.length);
    let getRidOf = dontMutateServices.splice(randomIdx, 1)[0]

    servicesToReturn.push(getRidOf)
    counter -= 1
  }
  servicesToReturn = servicesToReturn.filter(function(service){
    return (service !== null && service !== undefined)
  });
  console.log('here are the weird and erroneous serviceInterests', servicesToReturn)
  return servicesToReturn
}

function createSectorInterests () {
  let sectorInterests = []
  let sectors = sectorSkillsInterests['sectors'];
  console.log('voila les sectors', sectors)

  let dontMutateSectors = sectors.slice()
  let counter = Math.floor(Math.random()*sectors.length) + 1;
  while (counter) {
    let randomIdx = Math.floor(Math.random()* dontMutateSectors.length);
    let getRidOf = dontMutateSectors.splice(randomIdx, 1)[0]
    sectorInterests.push(getRidOf)
    counter -= 1
  };
  sectorInterests = sectorInterests.filter(function(sector){
    return (sector !== null && sector !== undefined)
  })
  return sectorInterests
}

function createSkills () {
  let skillsToReturn = []
  let skills = sectorSkillsInterests['skills'];
  console.log('voila les skills', skills)

  let dontMutateSkills = skills.slice()
  let counter = Math.floor(Math.random()*skills.length) + 1;
  while (counter) {
    let randomIdx = Math.floor(Math.random()* dontMutateSkills.length);
    let getRidOf = dontMutateSkills.splice(randomIdx, 1)[0]
    skillsToReturn.push(getRidOf)
    counter -= 1
  }
  skillsToReturn = skillsToReturn.filter(function(skill){
    return (skill !== null && skill !== undefined)
  })
  return skillsToReturn
}

function createProfile (gender, inputName) {
  //
  return (

  {
    name: inputName,
    photoUrl: createPhoto(gender),
    description: faker.lorem.paragraph(),
    location: locations[Math.floor(Math.random()*locations.length)],
    serviceInterests: createServiceInterests(),
    sectorInterests: createSectorInterests(),
    skills: createSkills(),
  }
)

}


let sampleInitiatives = {
  environment: [
    {name: 'Creek Cleanup', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'Walk for Science', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'RecycleMania', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Food Waste Reduction Initiative', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: 'Conservation Initiative', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: 'Wetland Restoration Day', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}],
  education: [
    {name: 'Community Readathon', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'District School Cleanup Day', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'READ Festival', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'After-School Mentor Program', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: 'Community Tutoring Initiative', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: 'Annual Book Festival', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}],
  homelessness: [
    {name: 'Community Blanket Distribution', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'Meal Prep Extravaganza', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'RecycleMania', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Can Drive and Distribution', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: 'Blanket Distribution Initiative', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: 'Community Food Drive!', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}],
  global_affairs: [
    {name: 'Refugee Support Mentoring', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'International Programs Fundraiser', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'Trafficking Outreach Group', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Virtual Business Mentoring Initiative', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"}],
  animal_welfare: [
    {name: 'Animal Shelter Fundraiser', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'Veterinary Medicine Fundraiser', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'Animal Rescue Forum', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Stray Animal Awareness Day', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: 'Save a Frog Extravaganza', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: 'Snakes Suck', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}],
  civic_engagement: [
    {name: 'Citizen Dialogue Forum', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'Get out the Vote!', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'RecycleMania', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Citizen Engagement Forum', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: '45th Annual Community Fair and Fundraiser', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: 'Wetland Restoration Day', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}],
  arts_and_culture: [
    {name: 'Fine Arts Festival', img: "https://www.commondreams.org/views/2012/01/23/clean-water-safeguards-headed-down-drain"},
    {name: 'School Arts Education Initiative', img: "http://www.dw.com/en/opinions-divided-on-march-for-science-in-the-us/a-38511917#"},
    {name: 'RecycleMania', img: "https://cdn20.patchcdn.com/users/22910461/20170509/091600/styles/T600x450/public/article_images/recycle_logo_copy.gif"},
    {name: 'Civic Arts  Creativity Fundraiser', img: "http://www.montgomeryparks.org/uploads/2017/03/Gateway-Garden-Planting-2016_3.jpg"},
    {name: 'Arts Appreciation Day', img: "http://www.accafrica-us.org/wp-content/uploads/bfi_thumb/Kenya_Tanzania_Borderlands_Conservation_Initiative31-n8kvws2ejz3820cghgfi3ovd4tst8q3ie0jndxfd1o.jpg"},
    {name: '39th Annual Civic Arts Festival', img: "http://141.232.10.32/images/Biscayne%20Bay.jpg"}]
}

let sampleAreas = {
  losAngeles: ['Calabasas', 'Playa del Rey', 'Thousand Oaks', 'Ventura', 'Santa Barbara'],
  newYork: ['Bronx', 'Hoboken', 'Jersey City', 'Yonkers', 'Queens'],
  chicago: ['Peoria', 'Muenster', 'Buffalo Grove', 'Wheaton', 'Elmhurst'],
  portland: ['Lake Oswego', 'West Linn', 'Happy Valley', 'Sherwood', 'Clackamas'],
  sanFran: ['Berkeley', 'Oakland', 'Mill Valley', 'Sausalito', 'Pleasanton']
}



function generateNearbyLocation(majorCityName, idx){
  let randomIdx = Math.floor(Math.random()*5)
  let condensedName, state;
  if (majorCityName.toLowerCase() === 'los angeles') {
    condensedName = 'losAngeles';
    state = "CA"
  }
  if (majorCityName.toLowerCase() === 'san francisco') {
    condensedName = 'sanFran';
    state = "CA";
  }
  if (majorCityName.toLowerCase() === 'new york') {
    condensedName = 'newYork';
    state = "NY"
  }
  if (majorCityName.toLowerCase() === 'chicago') {
    condensedName = 'chicago';
    state = "IL"
  }
  if (majorCityName.toLowerCase() === 'portland') {
    condensedName = 'portland';
    state = "OR"
  }
  return [sampleAreas[condensedName][randomIdx], state]
}

function generateEventAndPhoto(sector, suburb, orgName, locale) {
  let randomIdx = Math.floor(Math.random()*3);
  // console.log('randomIdx', randomIdx)
  let eventTypes = sampleInitiatives[sector.toLowerCase()];
  // console.log('eventTypes', eventTypes)
  let eventIdx = Math.floor(Math.random()*eventTypes.length);
  let initiative = eventTypes[eventIdx].name;
  let photo = eventTypes[eventIdx].img;
  let eventName;
  if (randomIdx === 0) eventName = orgName + ' - ' + initiative;
  if (randomIdx === 1) eventName = suburb + ' ' + initiative;
  if (randomIdx === 2) eventName = locale + ' ' + initiative;
  return [eventName, photo]
}

function generateInitiative(locale, orgName, sector) {
  let nearbyLocation = generateNearbyLocation(locale);
  // console.log('nearbyLocation', nearbyLocation);
  let suburb = nearbyLocation[0];
  // console.log('suburb', suburb)
  let state = nearbyLocation[1];
  // console.log('state', state)
  let eventAddress = `${faker.address.streetAddress()}\n${locale}, ${state} ${faker.address.zipCode()}`;
  // console.log('address', eventAddress)
  let eventNameAndPhoto = generateEventAndPhoto(sector, suburb, orgName, locale);
  // console.log('eventNameAndPhoto', eventNameAndPhoto)
  let eventName = eventNameAndPhoto[0];
  // console.log('eventName', eventName);
  let eventPhoto = eventNameAndPhoto[1];
  // console.log('eventPhoto', eventPhoto)
  let initiativetoReturn =
    {
      title: eventName,
      description: faker.lorem.paragraph(),
      address: eventAddress,
      photoUrl: eventPhoto,
      eventDate: faker.date.future(),
      sector: sector
    };
    // console.log('initiativetoReturn', initiativetoReturn)
    return initiativetoReturn


}

//
// *** Category legend
// ## Service opps.
// # environment
// beach cleanup
// park cleanup
// environmental exhibition
// walk for science
//
// #civic engagement
// xxth Annual Anniversary Celebration
// xxth Anniversary City Festival
// xxth Annual walkathons
// xxth Library Fundraiser
// Cityname... Recreation and Parks Food and Fun Exhibition
//
// #Education
// After-School Mentoring
// School Repair and Cleanup
// STEM Tutoring
//
// #Homeless
// Soup Kitchen Servathon
// Food Drive
// Walk for Hunger
//
// #Animal Welfare
// xxth Annual Veterinary Fundraiser
// Walk for Animal Rights
//



var lastNames = ['Abbott',
  'Acevedo',
  'Acosta',
  'Adams',
  'Adkins',
  'Aguilar',
  'Aguirre',
  'Albert',
  'Alexander',
  'Alford',
  'Allen',
  'Allison',
  'Alston',
  'Alvarado',
  'Alvarez',
  'Anderson',
  'Andrews',
  'Anthony',
  'Armstrong',
  'Arnold',
  'Ashley',
  'Atkins',
  'Atkinson',
  'Austin',
  'Avery',
  'Avila',
  'Ayala',
  'Ayers',
  'Bailey',
  'Baird',
  'Baker',
  'Baldwin',
  'Ball',
  'Ballard',
  'Banks',
  'Barber',
  'Barker',
  'Barlow',
  'Barnes',
  'Barnett',
  'Barr',
  'Barrera',
  'Barrett',
  'Barron',
  'Barry',
  'Bartlett',
  'Barton',
  'Bass',
  'Bates',
  'Battle',
  'Bauer',
  'Baxter',
  'Beach',
  'Bean',
  'Beard',
  'Beasley',
  'Beck',
  'Becker',
  'Bell',
  'Bender',
  'Benjamin',
  'Bennett',
  'Benson',
  'Bentley',
  'Benton',
  'Berg',
  'Berger',
  'Bernard',
  'Berry',
  'Best',
  'Bird',
  'Bishop',
  'Black',
  'Blackburn',
  'Blackwell',
  'Blair',
  'Blake',
  'Blanchard',
  'Blankenship',
  'Blevins',
  'Bolton',
  'Bond',
  'Bonner',
  'Booker',
  'Boone',
  'Booth',
  'Bowen',
  'Bowers',
  'Bowman',
  'Boyd',
  'Boyer',
  'Boyle',
  'Bradford',
  'Bradley',
  'Bradshaw',
  'Brady',
  'Branch',
  'Bray',
  'Brennan',
  'Brewer',
  'Bridges',
  'Briggs',
  'Bright',
  'Britt',
  'Brock',
  'Brooks',
  'Brown',
  'Browning',
  'Bruce',
  'Bryan',
  'Bryant',
  'Buchanan',
  'Buck',
  'Buckley',
  'Buckner',
  'Bullock',
  'Burch',
  'Burgess',
  'Burke',
  'Burks',
  'Burnett',
  'Burns',
  'Burris',
  'Burt',
  'Burton',
  'Bush',
  'Butler',
  'Byers',
  'Byrd',
  'Cabrera',
  'Cain',
  'Calderon',
  'Caldwell',
  'Calhoun',
  'Callahan',
  'Camacho',
  'Cameron',
  'Campbell',
  'Campos',
  'Cannon',
  'Cantrell',
  'Cantu',
  'Cardenas',
  'Carey',
  'Carlson',
  'Carney',
  'Carpenter',
  'Carr',
  'Carrillo',
  'Carroll',
  'Carson',
  'Carter',
  'Carver',
  'Case',
  'Casey',
  'Cash',
  'Castaneda',
  'Castillo',
  'Castro',
  'Cervantes',
  'Chambers',
  'Chan',
  'Chandler',
  'Chaney',
  'Chang',
  'Chapman',
  'Charles',
  'Chase',
  'Chavez',
  'Chen',
  'Cherry',
  'Christensen',
  'Christian',
  'Church',
  'Clark',
  'Clarke',
  'Clay',
  'Clayton',
  'Clements',
  'Clemons',
  'Cleveland',
  'Cline',
  'Cobb',
  'Cochran',
  'Coffey',
  'Cohen',
  'Cole',
  'Coleman',
  'Collier',
  'Collins',
  'Colon',
  'Combs',
  'Compton',
  'Conley',
  'Conner',
  'Conrad',
  'Contreras',
  'Conway',
  'Cook',
  'Cooke',
  'Cooley',
  'Cooper',
  'Copeland',
  'Cortez',
  'Cote',
  'Cotton',
  'Cox',
  'Craft',
  'Craig',
  'Crane',
  'Crawford',
  'Crosby',
  'Cross',
  'Cruz',
  'Cummings',
  'Cunningham',
  'Curry',
  'Curtis',
  'Dale',
  'Dalton',
  'Daniel',
  'Daniels',
  'Daugherty',
  'Davenport',
  'David',
  'Davidson',
  'Davis',
  'Dawson',
  'Day',
  'Dean',
  'Decker',
  'Dejesus',
  'Delacruz',
  'Delaney',
  'Deleon',
  'Delgado',
  'Dennis',
  'Diaz',
  'Dickerson',
  'Dickson',
  'Dillard',
  'Dillon',
  'Dixon',
  'Dodson',
  'Dominguez',
  'Donaldson',
  'Donovan',
  'Dorsey',
  'Dotson',
  'Douglas',
  'Downs',
  'Doyle',
  'Drake',
  'Dudley',
  'Duffy',
  'Duke',
  'Duncan',
  'Dunlap',
  'Dunn',
  'Duran',
  'Durham',
  'Dyer',
  'Eaton',
  'Edwards',
  'Elliott',
  'Ellis',
  'Ellison',
  'Emerson',
  'England',
  'English',
  'Erickson',
  'Espinoza',
  'Estes',
  'Estrada',
  'Evans',
  'Everett',
  'Ewing',
  'Farley',
  'Farmer',
  'Farrell',
  'Faulkner',
  'Ferguson',
  'Fernandez',
  'Ferrell',
  'Fields',
  'Figueroa',
  'Finch',
  'Finley',
  'Fischer',
  'Fisher',
  'Fitzgerald',
  'Fitzpatrick',
  'Fleming',
  'Fletcher',
  'Flores',
  'Flowers',
  'Floyd',
  'Flynn',
  'Foley',
  'Forbes',
  'Ford',
  'Foreman',
  'Foster',
  'Fowler',
  'Fox',
  'Francis',
  'Franco',
  'Frank',
  'Franklin',
  'Franks',
  'Frazier',
  'Frederick',
  'Freeman',
  'French',
  'Frost',
  'Fry',
  'Frye',
  'Fuentes',
  'Fuller',
  'Fulton',
  'Gaines',
  'Gallagher',
  'Gallegos',
  'Galloway',
  'Gamble',
  'Garcia',
  'Gardner',
  'Garner',
  'Garrett',
  'Garrison',
  'Garza',
  'Gates',
  'Gay',
  'Gentry',
  'George',
  'Gibbs',
  'Gibson',
  'Gilbert',
  'Giles',
  'Gill',
  'Gillespie',
  'Gilliam',
  'Gilmore',
  'Glass',
  'Glenn',
  'Glover',
  'Goff',
  'Golden',
  'Gomez',
  'Gonzales',
  'Gonzalez',
  'Good',
  'Goodman',
  'Goodwin',
  'Gordon',
  'Gould',
  'Graham',
  'Grant',
  'Graves',
  'Gray',
  'Green',
  'Greene',
  'Greer',
  'Gregory',
  'Griffin',
  'Griffith',
  'Grimes',
  'Gross',
  'Guerra',
  'Guerrero',
  'Guthrie',
  'Gutierrez',
  'Guy',
  'Guzman',
  'Hahn',
  'Hale',
  'Haley',
  'Hall',
  'Hamilton',
  'Hammond',
  'Hampton',
  'Hancock',
  'Haney',
  'Hansen',
  'Hanson',
  'Hardin',
  'Harding',
  'Hardy',
  'Harmon',
  'Harper',
  'Harrell',
  'Harrington',
  'Harris',
  'Harrison',
  'Hart',
  'Hartman',
  'Harvey',
  'Hatfield',
  'Hawkins',
  'Hayden',
  'Hayes',
  'Haynes',
  'Hays',
  'Head',
  'Heath',
  'Hebert',
  'Henderson',
  'Hendricks',
  'Hendrix',
  'Henry',
  'Hensley',
  'Henson',
  'Herman',
  'Hernandez',
  'Herrera',
  'Herring',
  'Hess',
  'Hester',
  'Hewitt',
  'Hickman',
  'Hicks',
  'Higgins',
  'Hill',
  'Hines',
  'Hinton',
  'Hobbs',
  'Hodge',
  'Hodges',
  'Hoffman',
  'Hogan',
  'Holcomb',
  'Holden',
  'Holder',
  'Holland',
  'Holloway',
  'Holman',
  'Holmes',
  'Holt',
  'Hood',
  'Hooper',
  'Hoover',
  'Hopkins',
  'Hopper',
  'Horn',
  'Horne',
  'Horton',
  'House',
  'Houston',
  'Howard',
  'Howe',
  'Howell',
  'Hubbard',
  'Huber',
  'Hudson',
  'Huff',
  'Huffman',
  'Hughes',
  'Hull',
  'Humphrey',
  'Hunt',
  'Hunter',
  'Hurley',
  'Hurst',
  'Hutchinson',
  'Hyde',
  'Ingram',
  'Irwin',
  'Jackson',
  'Jacobs',
  'Jacobson',
  'James',
  'Jarvis',
  'Jefferson',
  'Jenkins',
  'Jennings',
  'Jensen',
  'Jimenez',
  'Johns',
  'Johnson',
  'Johnston',
  'Jones',
  'Jordan',
  'Joseph',
  'Joyce',
  'Joyner',
  'Juarez',
  'Justice',
  'Kane',
  'Kaufman',
  'Keith',
  'Keller',
  'Kelley',
  'Kelly',
  'Kemp',
  'Kennedy',
  'Kent',
  'Kerr',
  'Key',
  'Kidd',
  'Kim',
  'King',
  'Kinney',
  'Kirby',
  'Kirk',
  'Kirkland',
  'Klein',
  'Kline',
  'Knapp',
  'Knight',
  'Knowles',
  'Knox',
  'Koch',
  'Kramer',
  'Lamb',
  'Lambert',
  'Lancaster',
  'Landry',
  'Lane',
  'Lang',
  'Langley',
  'Lara',
  'Larsen',
  'Larson',
  'Lawrence',
  'Lawson',
  'Le',
  'Leach',
  'Leblanc',
  'Lee',
  'Leon',
  'Leonard',
  'Lester',
  'Levine',
  'Levy',
  'Lewis',
  'Lindsay',
  'Lindsey',
  'Little',
  'Livingston',
  'Lloyd',
  'Logan',
  'Long',
  'Lopez',
  'Lott',
  'Love',
  'Lowe',
  'Lowery',
  'Lucas',
  'Luna',
  'Lynch',
  'Lynn',
  'Lyons',
  'Macdonald',
  'Macias',
  'Mack',
  'Madden',
  'Maddox',
  'Maldonado',
  'Malone',
  'Mann',
  'Manning',
  'Marks',
  'Marquez',
  'Marsh',
  'Marshall',
  'Martin',
  'Martinez',
  'Mason',
  'Massey',
  'Mathews',
  'Mathis',
  'Matthews',
  'Maxwell',
  'May',
  'Mayer',
  'Maynard',
  'Mayo',
  'Mays',
  'Mcbride',
  'Mccall',
  'Mccarthy',
  'Mccarty',
  'Mcclain',
  'Mcclure',
  'Mcconnell',
  'Mccormick',
  'Mccoy',
  'Mccray',
  'Mccullough',
  'Mcdaniel',
  'Mcdonald',
  'Mcdowell',
  'Mcfadden',
  'Mcfarland',
  'Mcgee',
  'Mcgowan',
  'Mcguire',
  'Mcintosh',
  'Mcintyre',
  'Mckay',
  'Mckee',
  'Mckenzie',
  'Mckinney',
  'Mcknight',
  'Mclaughlin',
  'Mclean',
  'Mcleod',
  'Mcmahon',
  'Mcmillan',
  'Mcneil',
  'Mcpherson',
  'Meadows',
  'Medina',
  'Mejia',
  'Melendez',
  'Melton',
  'Mendez',
  'Mendoza',
  'Mercado',
  'Mercer',
  'Merrill',
  'Merritt',
  'Meyer',
  'Meyers',
  'Michael',
  'Middleton',
  'Miles',
  'Miller',
  'Mills',
  'Miranda',
  'Mitchell',
  'Molina',
  'Monroe',
  'Montgomery',
  'Montoya',
  'Moody',
  'Moon',
  'Mooney',
  'Moore',
  'Morales',
  'Moran',
  'Moreno',
  'Morgan',
  'Morin',
  'Morris',
  'Morrison',
  'Morrow',
  'Morse',
  'Morton',
  'Moses',
  'Mosley',
  'Moss',
  'Mueller',
  'Mullen',
  'Mullins',
  'Munoz',
  'Murphy',
  'Murray',
  'Myers',
  'Nash',
  'Navarro',
  'Neal',
  'Nelson',
  'Newman',
  'Newton',
  'Nguyen',
  'Nichols',
  'Nicholson',
  'Nielsen',
  'Nieves',
  'Nixon',
  'Noble',
  'Noel',
  'Nolan',
  'Norman',
  'Norris',
  'Norton',
  'Nunez',
  'Obrien',
  'Ochoa',
  'Oconnor',
  'Odom',
  'Odonnell',
  'Oliver',
  'Olsen',
  'Olson',
  'Oneal',
  'Oneil',
  'Oneill',
  'Orr',
  'Ortega',
  'Ortiz',
  'Osborn',
  'Osborne',
  'Owen',
  'Owens',
  'Pace',
  'Pacheco',
  'Padilla',
  'Page',
  'Palmer',
  'Park',
  'Parker',
  'Parks',
  'Parrish',
  'Parsons',
  'Pate',
  'Patel',
  'Patrick',
  'Patterson',
  'Patton',
  'Paul',
  'Payne',
  'Pearson',
  'Peck',
  'Pena',
  'Pennington',
  'Perez',
  'Perkins',
  'Perry',
  'Peters',
  'Petersen',
  'Peterson',
  'Petty',
  'Phelps',
  'Phillips',
  'Pickett',
  'Pierce',
  'Pittman',
  'Pitts',
  'Pollard',
  'Poole',
  'Pope',
  'Porter',
  'Potter',
  'Potts',
  'Powell',
  'Powers',
  'Pratt',
  'Preston',
  'Price',
  'Prince',
  'Pruitt',
  'Puckett',
  'Pugh',
  'Quinn',
  'Ramirez',
  'Ramos',
  'Ramsey',
  'Randall',
  'Randolph',
  'Rasmussen',
  'Ratliff',
  'Ray',
  'Raymond',
  'Reed',
  'Reese',
  'Reeves',
  'Reid',
  'Reilly',
  'Reyes',
  'Reynolds',
  'Rhodes',
  'Rice',
  'Rich',
  'Richard',
  'Richards',
  'Richardson',
  'Richmond',
  'Riddle',
  'Riggs',
  'Riley',
  'Rios',
  'Rivas',
  'Rivera',
  'Rivers',
  'Roach',
  'Robbins',
  'Roberson',
  'Roberts',
  'Robertson',
  'Robinson',
  'Robles',
  'Rocha',
  'Rodgers',
  'Rodriguez',
  'Rodriquez',
  'Rogers',
  'Rojas',
  'Rollins',
  'Roman',
  'Romero',
  'Rosa',
  'Rosales',
  'Rosario',
  'Rose',
  'Ross',
  'Roth',
  'Rowe',
  'Rowland',
  'Roy',
  'Ruiz',
  'Rush',
  'Russell',
  'Russo',
  'Rutledge',
  'Ryan',
  'Salas',
  'Salazar',
  'Salinas',
  'Sampson',
  'Sanchez',
  'Sanders',
  'Sandoval',
  'Sanford',
  'Santana',
  'Santiago',
  'Santos',
  'Sargent',
  'Saunders',
  'Savage',
  'Sawyer',
  'Schmidt',
  'Schneider',
  'Schroeder',
  'Schultz',
  'Schwartz',
  'Scott',
  'Sears',
  'Sellers',
  'Serrano',
  'Sexton',
  'Shaffer',
  'Shannon',
  'Sharp',
  'Sharpe',
  'Shaw',
  'Shelton',
  'Shepard',
  'Shepherd',
  'Sheppard',
  'Sherman',
  'Shields',
  'Short',
  'Silva',
  'Simmons',
  'Simon',
  'Simpson',
  'Sims',
  'Singleton',
  'Skinner',
  'Slater',
  'Sloan',
  'Small',
  'Smith',
  'Snider',
  'Snow',
  'Snyder',
  'Solis',
  'Solomon',
  'Sosa',
  'Soto',
  'Sparks',
  'Spears',
  'Spence',
  'Spencer',
  'Stafford',
  'Stanley',
  'Stanton',
  'Stark',
  'Steele',
  'Stein',
  'Stephens',
  'Stephenson',
  'Stevens',
  'Stevenson',
  'Stewart',
  'Stokes',
  'Stone',
  'Stout',
  'Strickland',
  'Strong',
  'Stuart',
  'Suarez',
  'Sullivan',
  'Summers',
  'Sutton',
  'Swanson',
  'Sweeney',
  'Sweet',
  'Sykes',
  'Talley',
  'Tanner',
  'Tate',
  'Taylor',
  'Terrell',
  'Terry',
  'Thomas',
  'Thompson',
  'Thornton',
  'Tillman',
  'Todd',
  'Torres',
  'Townsend',
  'Tran',
  'Travis',
  'Trevino',
  'Trujillo',
  'Tucker',
  'Turner',
  'Tyler',
  'Tyson',
  'Underwood',
  'Valdez',
  'Valencia',
  'Valentine',
  'Valenzuela',
  'Vance',
  'Vang',
  'Vargas',
  'Vasquez',
  'Vaughan',
  'Vaughn',
  'Vazquez',
  'Vega',
  'Velasquez',
  'Velazquez',
  'Velez',
  'Villarreal',
  'Vincent',
  'Vinson',
  'Wade',
  'Wagner',
  'Walker',
  'Wall',
  'Wallace',
  'Waller',
  'Walls',
  'Walsh',
  'Walter',
  'Walters',
  'Walton',
  'Ward',
  'Ware',
  'Warner',
  'Warren',
  'Washington',
  'Waters',
  'Watkins',
  'Watson',
  'Watts',
  'Weaver',
  'Webb',
  'Weber',
  'Webster',
  'Weeks',
  'Weiss',
  'Welch',
  'Wells',
  'West',
  'Wheeler',
  'Whitaker',
  'White',
  'Whitehead',
  'Whitfield',
  'Whitley',
  'Whitney',
  'Wiggins',
  'Wilcox',
  'Wilder',
  'Wiley',
  'Wilkerson',
  'Wilkins',
  'Wilkinson',
  'William',
  'Williams',
  'Williamson',
  'Willis',
  'Wilson',
  'Winters',
  'Wise',
  'Witt',
  'Wolf',
  'Wolfe',
  'Wong',
  'Wood',
  'Woodard',
  'Woods',
  'Woodward',
  'Wooten',
  'Workman',
  'Wright',
  'Wyatt',
  'Wynn',
  'Yang',
  'Yates',
  'York',
  'Young',
  'Zamora',
  'Zimmerman'];

var maleNames = ['Preston', 'Hunter', 'Michael', 'Cole', 'Thomas', 'Cedric', 'Raul',
'Bryan',
'Kasey',
'Orville',
'Frank',
'Sandy',
'Doug',
'Vance',
'Jasper',
'Lance',
'Horatio',
'Guy',
'Horton',
'Jackson',
'James',
'Loquatious',
'Les',
'Gerry',
'Pierre',
'Claude',
'Pepe',
'Les',
'Joe',
'Nicolas',
'Jermaine',
'Claudius',
'Cassius',
'Shawn',
'Hans',
'Sebastien',
'Jean-Claude',
'Jean-Paul',
'Donovan']

let femaleNames = [
  'Edda',
  'Agnes',
  'Amanda',
  'Sara',
  'Celestine',
  'Izetta',
  'Esmeralda',
  'Ellen',
  'Tamara',
  'Lavonda',
  'Sheila',
  'Shyla',
  'Ozella',
  'Sarah',
  'Rachel',
  'Fay',
  'Margarette',
  'Hayley',
  'Michelle',
  'Joanna',
  'Kayla',
  'Lorilee',
  'Sophia',
  'Julie',
  'Elsa',
  'Anna',
  'Lois',
  'Sonja',
  'Veda',
  'Penny',
  'Tamika',
  'Candice',
  'Danielle',
  'Cecily',
  'Sarika',
  'Puja',
  'Claire'
]


function createLastName () {
  return lastNames[Math.floor(Math.random()*lastNames.length)]
}

function createFullName(gender){
  let firstName, lastName
  if (gender === "male") firstName = maleNames[Math.floor(Math.random()*maleNames.length)];
  if (gender === "female") firstName = femaleNames[Math.floor(Math.random()*femaleNames.length)];
  lastName = createLastName();
  return  firstName + ' ' + lastName
}





module.exports = {genderSelect, createUser, createPhoto, generateInitiative, createProfile, createFullName, createLastName, femaleNames, maleNames}
